/*
 * Copyright 2023 The Context Mapper project team.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.contextmapper.sample.tlas.infrastructure.webapi;

import org.contextmapper.sample.tlas.application.TlaApplicationService;
import org.contextmapper.sample.tlas.infrastructure.webapi.mapper.TlaApiDTOMapper;
import org.contextmapper.sample.tlas.infrastructure.webapi.model.TLADto;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.stream.Collectors;

import static org.contextmapper.sample.tlas.infrastructure.webapi.mapper.TlaApiDTOMapper.tlaToDto;

/**
 * This is the actual implementation of the TlasApiController.
 * <p>
 * Note: Controller and DTOs are generated by the Open API generator. We follow the
 * 'API-first' approach: https://swagger.io/resources/articles/adopting-an-api-first-approach/
 * The API is specified in 'src/main/resources/tla-web-api.yml'
 *
 * You find the generated sources under 'target/generated-sources/openapi/src/main/java'.
 * To re-generate, call the Maven build: ./mvnw clean verify
 */
@Component
public class TlaApiDelegateImpl implements TlasApiDelegate {

    private TlaApplicationService applicationService;

    public TlaApiDelegateImpl(final TlaApplicationService applicationService) {
        this.applicationService = applicationService;
    }

    @Override
    public ResponseEntity<List<TLADto>> listTLAs() {
        return ResponseEntity.ok(applicationService.findAllTLAs().stream()
                .map(TlaApiDTOMapper::tlaToDto)
                .collect(Collectors.toList()));
    }

    @Override
    public ResponseEntity<TLADto> getTLAByName(final String name) {
        return ResponseEntity.ok(tlaToDto(applicationService.getTLAByName(name)));
    }
}
